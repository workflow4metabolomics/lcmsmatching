<project name="w4m.tool.lcmsmatching" default="all">

	<dirname property="this.dir" file="${ant.file.w4m.tool.lcmsmatching}"/>
	<property name="conda.dir" value="${user.home}/w4m-conda"/>

	<!--~~~~~~~~~~~~~~~~~
	~ PUBLIC PROPERTIES ~
	~~~~~~~~~~~~~~~~~~-->

	<!-- These properties can be set when calling Ant: `ant -DPROP=value ...`. -->

	<property name="TIMESTAMP" value="true"/>
	<property name="VERSION" value="true"/>
	<property name="DIST.TEST" value="true"/>
	<property name="TOOL.PREFIX" value="$__tool_directory__/"/>
	<property name="PKG.PREFIX" value="w4m-tool-lcmsmatching"/>

	<!--~~~~~~~~~~~~~~~~~~~
	~ INTERNAL PROPERTIES ~
	~~~~~~~~~~~~~~~~~~~~-->

	<!-- Version -->
	<property name="version" value="2.1.3"/>
	<condition property="version.suffix" value="" else="-${version}">
		<isfalse value="${VERSION}"/>
	</condition>

	<!-- Distribution directories -->
	<property name="dist.dir" value="dist"/>
	<property name="dist.code.dir" value="${dist.dir}/code"/>
	<property name="dist.test.dir" value="${dist.dir}/test"/>

	<!-- Tool XML paths -->
	<property name="tool.xml" value="lcmsmatching.xml"/>
	<property name="orig.tool.xml" value="galaxy/${tool.xml}"/>
	<property name="dest.tool.xml" value="${dist.code.dir}/${tool.xml}"/>

	<!-- Time stamp -->
	<tstamp/>
	<property name="timestamp" value="${DSTAMP}-${TSTAMP}"/>
	<condition property="timestamp.suffix" value="" else="-${timestamp}">
		<isfalse value="${TIMESTAMP}"/>
	</condition>

	<!-- Package -->
	<property name="pkg.ext" value="tar.gz"/>
	<property name="pkg.name" value="${PKG.PREFIX}${version.suffix}${timestamp.suffix}"/>
	<property name="pkg.path" value="${dist.dir}/${pkg.name}.${pkg.ext}"/>

	<!--~~~
	~ ALL ~
	~~~~~-->

	<target name="all"/>

	<!--~~~~
	~ DIST ~
	~~~~~-->

	<target name="dist" depends="dist.code,dist.tar,dist.test"/>

	<!--~~~~~~~~
	~ DIST W4M ~
	~~~~~~~~~-->

	<target name="dist.w4m" depends="w4m.code,dist.tar,dist.test"/>

	<!--~~~~~~~~~
	~ DIST TEST ~
	~~~~~~~~~~-->

	<target name="dist.test" if="${DIST.TEST}">

		<!-- Make temp dir -->
		<delete dir="${dist.test.dir}"/>
		<mkdir dir="${dist.test.dir}"/>

		<!-- Extract package in temp dir -->
		<untar src="${pkg.path}" dest="${dist.test.dir}" compression="gzip"/>
		<chmod file="${dist.test.dir}/search-mz" perm="u+x"/> <!-- This file should be already executable, since it has been put executable inside the tar. It seems the untar task of Ant does not handle the file permissions. -->

		<!-- Run search-mz on sample input file -->
		<exec executable="${dist.test.dir}/search-mz" failonerror="true">
			<arg value="-d"/>
			<arg value="file"/>
			<arg value="--url"/>
			<arg value="r-msdb/test/filedb.tsv"/>
			<arg value="-m"/>
			<arg value="pos"/>
			<arg value="-i"/>
			<arg value="r-msdb/test/mzrt-input.tsv"/>
			<arg value="-o"/>
			<arg value="mzrt-output.tsv"/>
		</exec>

	</target>

	<!--~~~~~~~~
	~ W4M CODE ~
	~~~~~~~~~-->

	<target name="w4m.code" depends="dist.code">

		<!-- Get all needed values for completing tool XML file. -->
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="input.fields">
			<arg value="--print-input-col-names"/>
		</exec>
		<echo>INPUT.FIELDS = ${input.fields}</echo>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="output.fields">
			<arg value="--print-output-col-names"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="pos.prec">
			<arg value="--print-pos-prec"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="neg.prec">
			<arg value="--print-neg-prec"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="db.fields">
			<arg value="--print-db-fields"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="db.ms.modes">
			<arg value="--print-db-ms-modes"/>
		</exec>

		<!-- Copy and transform tool XML file. -->
		<copy file="${orig.tool.xml}" tofile="${dest.tool.xml}">
			<filterchain>
				<replacetokens>
					<token key="TOOL_PREFIX" value="${TOOL.PREFIX}"/>
					<token key="INPUT_FIELDS" value="${input.fields}"/>
					<token key="OUTPUT_FIELDS" value="${output.fields}"/>
					<token key="POS_PREC" value="${pos.prec}"/>
					<token key="NEG_PREC" value="${neg.prec}"/>
					<token key="DB_FIELDS" value="${db.fields}"/>
					<token key="DB_MS_MODES" value="${db.ms.modes}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--~~~~~~~~~
	~ DIST CODE ~
	~~~~~~~~~~-->

	<target name="dist.code">

		<!-- Clean directory -->
		<delete dir="${dist.code.dir}"/>
		<mkdir dir="${dist.code.dir}"/>

		<!-- Copy R code -->
		<copy todir="${dist.code.dir}">
			<fileset dir="r-msdb" includes="search-mz,*.R"/>
			<fileset dir="r-lib" includes="*.R"/> <!-- dependency -->
			<fileset dir="r-biodb" includes="*.R"/> <!-- dependency -->
		</copy>

		<!-- Update paths in `source()` function calls. -->
		<replace dir="${dist.code.dir}">
			<replacefilter token="../r-lib/" value=""/>
			<replacefilter token="../r-biodb/" value=""/>
			<replacefilter token="'..', 'r-lib', " value=""/>
			<replacefilter token="'..', 'r-biodb', " value=""/>
		</replace>

	</target>

	<!--~~~~~~~~
	~ DIST TAR ~
	~~~~~~~~~-->

	<target name="dist.tar">

		<!-- Build tar file -->
		<tar destfile="${pkg.path}" compression="gzip">

			<!-- Include script with execution rights -->
			<tarfileset dir="${dist.code.dir}" filemode="755">
				<include name="search-mz"/>
			</tarfileset>

			<!-- Include remaining code and data files -->
			<tarfileset dir="${dist.code.dir}">
				<include name="**"/>
				<exclude name="search-mz"/>
			</tarfileset>
		</tar>
	</target>

	<!--~~~~~
	~ CLEAN ~
	~~~~~~-->

	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${conda.dir}"/>
	</target>

	<!--~~~~~~~~~~~
	~ GALAXY TEST ~
	~~~~~~~~~~~~-->

	<target name="test" depends="planemo.lint,planemo.test"/>

	<!--~~~~~~~~~~~~
	~ PLANEMO LINT ~
	~~~~~~~~~~~~~-->

	<target name="planemo.lint" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="lint"/>
			<arg value="${tool.xml}"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~
	~ PLANEMO TEST ~
	~~~~~~~~~~~~~-->

	<target name="planemo.test" depends="planemo.conda.install">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="test"/>
			<arg value="--conda_prefix"/>
			<arg value="${conda.dir}"/>
			<arg value="--galaxy_branch"/>
			<arg value="release_16.01"/>
			<arg value="--conda_dependency_resolution"/>
			<arg value="${tool.xml}"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO CONDA INSTALL ~
	~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.conda.install" depends="planemo.conda.init,planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="conda_install"/>
			<arg value="--conda_prefix"/>
			<arg value="${conda.dir}"/>
			<arg value="${tool.xml}"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~
	~ PLANEMO CONDA INIT ~
	~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.conda.init">
		<exec executable="planemo" failonerror="true">
			<arg value="conda_init"/>
			<arg value="--conda_prefix"/>
			<arg value="${conda.dir}"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~
	~ PLANEMO SHED LINT ~
	~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.shed.lint" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_lint"/>
			<arg value="--tools"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TEST TOOLSHED CREATE ~
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.testtoolshed.create" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_create"/>
			<arg value="--shed_target"/>
			<arg value="testtoolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TEST TOOLSHED DIFF ~
	~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.testtoolshed.diff" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_diff"/>
			<arg value="--shed_target"/>
			<arg value="testtoolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TEST TOOLSHED UPDATE ~
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.testtoolshed.update" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_update"/>
			<arg value="--check_diff"/>
			<arg value="--shed_target"/>
			<arg value="testtoolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TEST TOOLSHED TEST ~
	~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.testtoolshed.test" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_test"/>
			<arg value="--shed_target"/>
			<arg value="testtoolshed"/>
			<arg value="--install_galaxy"/>
			<arg value="--galaxy_branch"/>
			<arg value="release_16.01"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TOOLSHED CREATE ~
	~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.toolshed.create" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_create"/>
			<arg value="--shed_target"/>
			<arg value="toolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TOOLSHED DIFF ~
	~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.toolshed.diff" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_diff"/>
			<arg value="--shed_target"/>
			<arg value="toolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~~~~~~~~~~~~~
	~ PLANEMO TOOLSHED UPDATE ~
	~~~~~~~~~~~~~~~~~~~~~~~~-->

	<target name="planemo.toolshed.update" depends="planemo.env">
		<exec executable="planemo" dir="${dist.code.dir}" failonerror="true">
			<arg value="shed_update"/>
			<arg value="--check_diff"/>
			<arg value="--shed_target"/>
			<arg value="toolshed"/>
		</exec>
	</target>

	<!--~~~~~~~~~~~
	~ PLANEMO ENV ~
	~~~~~~~~~~~~-->

	<target name="planemo.env" depends="w4m.code">
		<chmod file="${dist.code.dir}/search-mz" perm="u+x"/>
		<ant dir="r-msdb/test" target="input.files"/>
		<mkdir dir="${dist.code.dir}/test-data"/>
		<copy todir="${dist.code.dir}/test-data">
			<fileset dir="r-msdb/test" includes="filedb.tsv"/>
			<fileset dir="r-msdb/test" includes="mz-input-small.tsv"/>
			<fileset dir="r-msdb/test/res" includes="filedb-small-mz-match-*"/>
		</copy>
		<copy file="shed.yml" tofile="${dist.code.dir}/.shed.yml"/>
	</target>

	<!--************************************************
	******************** DEPRECATED ********************
	*************************************************-->

	<!--~~~~~~~~~~~~~
	~ UPDATE W4M VM ~
	~~~~~~~~~~~~~~-->

	<!-- This task is used when developping, for updating quickly the tool inside the local W4M virtual machine. -->
	<target name="update.w4m.vm" depends="clean,dist">

		<property name="w4m.login" value="galaxy@w4m"/>
		<property name="tool.path" value="galaxy-pfem/tools/metabolomics/annotation/lcmsmatching"/>

		<!-- Stop Galaxy -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="/sbin/service galaxy stop"/>
		</exec>

		<!-- Remove current tool version -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="rm -rf ${tool.path}"/>
		</exec>

		<!-- Remove old packages on W4M instance -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="rm -f ${PKG.PREFIX}-*.${pkg.ext}"/>
		</exec>

		<!-- Copy new package on W4M instance -->
		<exec executable="scp" failonerror="true">
			<arg value="${dist.dir}/${pkg.name}.${pkg.ext}"/>
			<arg value="${w4m.login}:."/>
		</exec>

		<!-- Make tool directory -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="mkdir -p ${tool.path}"/>
		</exec>

		<!-- Install new tool version -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="tar -xzf ${pkg.name}.${pkg.ext} -C ${tool.path}"/>
		</exec>

		<!-- Restart Galaxy -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="/sbin/service galaxy start"/>
		</exec>

	</target>

</project>
